# coding: utf-8

"""
    Data API

    Serves the Clever Data API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Resource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'district': 'str',
        'id': 'str',
        'resource_id': 'str',
        'roles': 'list[str]',
        'title': 'str',
        'updated': 'datetime'
    }

    attribute_map = {
        'created': 'created',
        'district': 'district',
        'id': 'id',
        'resource_id': 'resource_id',
        'roles': 'roles',
        'title': 'title',
        'updated': 'updated'
    }

    def __init__(self, created=None, district=None, id=None, resource_id=None, roles=None, title=None, updated=None):  # noqa: E501
        """Resource - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._district = None
        self._id = None
        self._resource_id = None
        self._roles = None
        self._title = None
        self._updated = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if district is not None:
            self.district = district
        if id is not None:
            self.id = id
        if resource_id is not None:
            self.resource_id = resource_id
        if roles is not None:
            self.roles = roles
        if title is not None:
            self.title = title
        if updated is not None:
            self.updated = updated

    @property
    def created(self):
        """Gets the created of this Resource.  # noqa: E501


        :return: The created of this Resource.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Resource.


        :param created: The created of this Resource.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def district(self):
        """Gets the district of this Resource.  # noqa: E501


        :return: The district of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Resource.


        :param district: The district of this Resource.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def id(self):
        """Gets the id of this Resource.  # noqa: E501


        :return: The id of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Resource.


        :param id: The id of this Resource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_id(self):
        """Gets the resource_id of this Resource.  # noqa: E501


        :return: The resource_id of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Resource.


        :param resource_id: The resource_id of this Resource.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def roles(self):
        """Gets the roles of this Resource.  # noqa: E501


        :return: The roles of this Resource.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Resource.


        :param roles: The roles of this Resource.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["teacher", "student"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(roles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def title(self):
        """Gets the title of this Resource.  # noqa: E501


        :return: The title of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Resource.


        :param title: The title of this Resource.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated(self):
        """Gets the updated of this Resource.  # noqa: E501


        :return: The updated of this Resource.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Resource.


        :param updated: The updated of this Resource.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Resource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
